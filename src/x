diff --git a/example/outputs/D1GDAYDUKEAMB.csv b/example/outputs/D1GDAYDUKEAMB.csv
index 6bf4dac..2db738a 100644
--- a/example/outputs/D1GDAYDUKEAMB.csv
+++ b/example/outputs/D1GDAYDUKEAMB.csv
@@ -1,4 +1,4 @@
-#Git_revision_code:650e971533b2e74f13c650ef728433c6d2b9d52e
+#Git_revision_code:d35a487ec45928a0f3895f0f6f0759e8bfc0b473
 Year,Day of the year,CO2,Precipitation,PAR,Air temp canopy,Soil temp 10 cm,Vapour Pres Def,Total soil water content,N deposition,Net Eco Prod,Gross Prim Prod,Net Prim Prod,C exudation,C VOC Flux,Resp ecosystem,Resp autotrophic,Resp leaves (maint),Resp Wood (maint),Resp Fine Root (maint),Resp growth,Resp heterotrophic,Resp from soil,Evapotranspiration,Transpiration,Soil Evaporation,Canopy evaporation,Runoff,Drainage,Latent Energy,Sensible Heat,C Leaf Mass,C Wood Mass,C Coarse Root mass,C Fine Root mass,C Storage as TNC,C Fine Litter Total,C Fine Litter above,C Fine Litter below,C Coarse Litter,C Soil,C Leaf growth,C Wood growth,C Coarse Root growth,C Fine Root growth,C reproduction growth,C Leaf Litterfall,C Coarse Root litter inputs,C Fine Root litter inputs,C Wood/branch inputs,LAI projected,Leaf gC/leaf area,N Conc Leaves,N Mass Leaves,N Mass Wood,N Mass Coarse Roots,N Mass Fine Roots,N storage,N litter aboveground,N litter belowground,N Dead wood,N Soil Total,N in Mineral form,N in Organic form,N fixation,N Leaf Litterfall,N Wood/brch litterfall,N Coarse Root litter input,N Fine Root litter input,N Biomass Uptake,N Gross Mineralization,N Net mineralization,N Volatilization,N Leaching,N Leaf growth,N Wood growth,N CR growth,N Fine Root growth,Aborbed PAR,Average daytime canopy conductance,Average daytime aerodynamic conductance,Average daytime leaf boundary conductance,Soil moisture stress,Foliage retranslocation,Wood/Branch retranslocation,Coarse Root retranslocation,Fine Root retranslocation,C fluxes from litter & slow/passive to active soil pool,C fluxes from litter & active soil pool to slow pool,C fluxes from active & slow soil pool to passive pool,C flux from active soil pool to slow soil pool,C flux from active soil pool to passive soil pool,C flux from slow soil pool to active soil pool,C flux from slow pool to passive soil pool,C flux from passive pool to active pool,C Active SOM pool,C Slow SOM pool,C Passive SOM pool,CO2 efflux from surf structural litter,CO2 efflux from soil structural litter,CO2 efflux from surf metabolic litter,CO2 efflux from soil metabolic litter,CO2 efflux from fast SOM pool,CO2 efflux from slow SOM pool,CO2 efflux from passive SOM pool,Temperature scalar on C efflux from SOM pools,Root Exudation of C,Root Exudation of N,CO2 released from exudation,Total C flux from the active pool,Residence time of slow pool,REXC carbon use efficiency
 --,--,Mean ppm,PPT,mol m-2,Mean DegC,Mean DegC,kPa h,mm,gN m-2 d-1,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,kgH2O m-2 d-1,kgH2O m-2 d-1,kgH2O m-2 d-1,kgH2O m-2 d-1,kgH2O m-2 d-1,kgH2O m-2 d-1,MJ m-2,MJ m-2,gC m-2,gC m-2,gC m-2,gC m-2,gC m-2,gC m-2,gC m-2,gC m-2,gC m-2,gC m-2 0 to 30 cm,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,m2 m-2,gC m-2,gN gd.m.-1,gN m-2,gN m-2,gN m-2,gN m-2,gN m-2,gN m-2,gN m-2,gN m-2,gN m-2 0 to 30 cm,gN m-2 0 to 30 cm,gN m-2 0 to 30 cm,gN m-2 d-1,gN m-2 d-1,gN m-2 d-1,gN m-2 d-1,gN m-2 d-1,gN m-2 d-1,gN m-2 d-1,gN m-2 d-1,gN m-2 d-1,gN m-2 d-1,gN m-2 d-1,gN m-2 d-1,gN m-2 d-1,gN m-2 d-1,MJ m-2 d-1,mol H2O m-2 s-1,mol H2O m-2 s-1,mol H2O m-2 s-1,frac,gN m-2 d-1,gN m-2 d-1,gN m-2 d-1,gN m-2 d-1,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,gC m-2,gC m-2,gC m-2,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,gC m-2 d-1,frac,gC m-2 d-1,gN m-2 d-1,gC m-2 d-1,gC m-2 d-1,years,frac
 YEAR,DOY,CO2,PPT,PAR,AT,ST,VPD,SW,NDEP,NEP,GPP,NPP,CEX,CVOC,RECO,RAUTO,RLEAF,RWOOD,RROOT,RGROW,RHET,RSOIL,ET,T,ES,EC,RO,DRAIN,LE,SH,CL,CW,CCR,CFR,TNC,CFLIT,CFLITA,CFLITB,CCLITB,CSOIL,GL,GW,GCR,GR,GREPR,CLLFALL,CCRLIN,CFRLIN,CWIN,LAI,LMA,NCON,NCAN,NWOOD,NCR,NFR,NSTOR,NLIT,NRLIT,NDW,NSOIL,NPOOLM,NPOOLO,NFIX,NLITIN,NWLIN,NCRLIN,NFRLIN,NUP,NGMIN,NMIN,NVOL,NLEACH,NGL,NGW,NGCR,NGR,APARd,GCd,GAd,GBd,Betad,NLRETRANS,NWRETRANS,NCRRETRANS,NFRRETRANS,CTOACTIVE,CTOSLOW,CTOPASSIVE,CACTIVETOSLOW,CACTIVETOPASSIVE,CSLOWTOACTIVE,CSLOWTOPASSIVE,CPASSIVETOACTIVE,CACTIVE,CSLOW,CPASSIVE,CO2SLITSURF,CO2SLITSOIL,CO2MLITSURF,CO2MLITSOIL,CO2FSOM,CO2SSOM,CO2PSOM,TFACSOM,REXC,REXN,CO2X,FACTIVE,RTSLOW,REXCUE
diff --git a/example/params/NCEAS_DUKE_model_youngforest_amb.cfg b/example/params/NCEAS_DUKE_model_youngforest_amb.cfg
index 1ccbb80..8e1ec5d 100644
--- a/example/params/NCEAS_DUKE_model_youngforest_amb.cfg
+++ b/example/params/NCEAS_DUKE_model_youngforest_amb.cfg
@@ -228,7 +228,7 @@ fixed_stem_nc = true
 frost = false
 grazing = false
 gs_model = medlyn
-hurricane = false
+hurricane = 0
 modeljm = 2
 model_optroot = false
 nuptake_model = 2
diff --git a/example/params/base_start.cfg b/example/params/base_start.cfg
index 98270bd..ded2c71 100755
--- a/example/params/base_start.cfg
+++ b/example/params/base_start.cfg
@@ -178,8 +178,6 @@ branchn = 0.00004
 canht = 0.1
 cstore = 0.001
 inorgn = 0.00004
-max_lai = -999.9
-max_shoot = -999.9
 metabsoil = 0.0
 metabsoiln = 0.0
 metabsurf = 0.0
@@ -223,14 +221,14 @@ adjust_rtslow = false
 assim_model = mate   
 calc_sw_params = false
 deciduous_model = false
-disturbance = false 
+disturbance = 0 
 exudation = false
 fixleafnc = false
 fixed_stem_nc = true
 frost = false
-grazing = 0       
+grazing = false       
 gs_model = medlyn    
-hurricane = false
+hurricane = 0
 modeljm = 1     
 model_optroot = false
 nuptake_model = 1      
diff --git a/src/Makefile b/src/Makefile
index eab3c10..4e7da64 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -13,7 +13,7 @@ SOURCES  =  \
 $(PROGRAM).c version.c read_param_file.c read_met_file.c \
 litter_production.c utilities.c plant_growth.c mate.c water_balance.c \
 simple_moving_average.c soils.c optimal_root_model.c initialise_model.c \
-write_output_file.c phenology.c disturbance.c
+write_output_file.c phenology.c
 
 OBJECTS = $(SOURCES:.c=.o)
 RM       =  rm -f
diff --git a/src/disturbance.c b/src/disturbance.c
deleted file mode 100644
index 4704309..0000000
--- a/src/disturbance.c
+++ /dev/null
@@ -1,212 +0,0 @@
-#include "disturbance.h"
-
-
-void figure_out_years_with_disturbances(control *c, met *m, params *p,
-                                        int **yrs, int *cnt) {
-    int nyr, year_of_disturbance, yrs_till_event, prjday, year;
-
-    if (p->burn_specific_yr < -900.0) {
-        year_of_disturbance = p->burn_specific_yr;
-        (*yrs)[0] = p->burn_specific_yr;
-    } else {
-        yrs_till_event = time_till_next_disturbance();
-        year = (int)m->year[prjday];
-        /*year_of_disturbance = year + yrs_till_event; */
-        year_of_disturbance = 1996;
-
-        /* figure out the years of the disturbance events  */
-        *cnt = 0;
-        prjday = 0;
-
-        for (nyr = 0; nyr < c->num_years - 1; nyr++) {
-            year = (int)m->year[prjday];
-            if (is_leap_year(year))
-                prjday+=366;
-            else
-                prjday+=365;
-
-            if (year == year_of_disturbance) {
-                yrs_till_event = time_till_next_disturbance();
-
-                if (*cnt == 0) {
-                    (*yrs)[0] = year_of_disturbance;
-                } else {
-                    *cnt += 1;
-                    if ((yrs = (int **)realloc(yrs, (1 + *cnt) * sizeof(int))) == NULL) {
-                        fprintf(stderr,"Error resizing years array\n");
-                		exit(EXIT_FAILURE);
-                    }
-                    (*yrs)[*cnt] = year_of_disturbance;
-                }
-
-                /* See if there is another event? */
-                year_of_disturbance = year + yrs_till_event;
-            }
-        }
-    }
-
-    return;
-}
-
-int time_till_next_disturbance() {
-    /* calculate the number of years until a disturbance event occurs
-    assuming a return interval of X years
-
-    - section 3.4.1 D. Knuth, The Art of Computer Programming.
-
-    Parameters
-    ----------
-    return_interval : int/float
-        interval disturbance return at in years
-    */
-    /* rate = 1.0 / p->return_interval; */
-
-    /*return int(-log(1.0 - random.random()) / rate); */
-
-    return (11);
-}
-
-int check_for_fire(control *c, fluxes *f, params *p, state *s, int year,
-                   int *distrubance_yrs, int num_disturbance_yrs) {
-    /* Check if the current year has a fire, if so "burn" and then
-       return an indicator to tell the main code to reset the stress stream */
-    int fire_found = FALSE;
-    int nyr;
-
-    for (nyr = 0; nyr < num_disturbance_yrs; nyr++) {
-        if (year == distrubance_yrs[nyr]) {
-            fire_found = TRUE;
-        }
-    }
-
-    return (fire_found);
-}
-
-void fire(control *c, fluxes *f, params *p, state *s) {
-    /*
-    Fire...
-
-    * 100 percent of aboveground biomass
-    * 100 percent of surface litter
-    * 50 percent of N volatilized to the atmosphere
-    * 50 percent of N returned to inorgn pool"
-    * Coarse roots are not damaged by fire!
-
-    vaguely following ...
-    http://treephys.oxfordjournals.org/content/24/7/765.full.pdf
-    */
-    double totaln;
-
-    totaln = s->branchn + s->shootn + s->stemn + s->structsurfn;
-    s->inorgn += totaln / 2.0;
-
-    /* re-establish everything with C/N ~ 25.  */
-    if (c->alloc_model == GRASSES) {
-        s->branch = 0.0;
-        s->branchn = 0.0;
-        s->sapwood = 0.0;
-        s->stem = 0.0;
-        s->stemn = 0.0;
-        s->stemnimm = 0.0;
-        s->stemnmob = 0.0;
-    } else {
-        s->branch = 0.001;
-        s->branchn = 0.00004;
-        s->sapwood = 0.001;
-        s->stem = 0.001;
-        s->stemn = 0.00004;
-        s->stemnimm = 0.00004;
-        s->stemnmob = 0.0;
-    }
-
-    s->age = 0.0;
-    s->metabsurf = 0.0;
-    s->metabsurfn = 0.0;
-    s->prev_sma = 1.0;
-    s->root = 0.001;
-    s->rootn = 0.00004;
-    s->shoot = 0.001;
-    s->lai = p->sla * M2_AS_HA / KG_AS_TONNES / p->cfracts * s->shoot;
-    s->shootn = 0.00004;
-    s->structsurf = 0.001;
-    s->structsurfn = 0.00004;
-
-    /* reset litter flows */
-    f->deadroots = 0.0;
-    f->deadstems = 0.0;
-    f->deadbranch = 0.0;
-    f->deadsapwood = 0.0;
-    f->deadleafn = 0.0;
-    f->deadrootn = 0.0;
-    f->deadbranchn = 0.0;
-    f->deadstemn = 0.0;
-
-    /* update N:C of plant pools */
-    if (float_eq(s->shoot, 0.0))
-        s->shootnc = 0.0;
-    else
-        s->shootnc = s->shootn / s->shoot;
-
-    if (c->ncycle == FALSE)
-        s->shootnc = p->prescribed_leaf_NC;
-
-    if (float_eq(s->root, 0.0))
-        s->rootnc = 0.0;
-    else
-        s->rootnc = MAX(0.0, s->rootn / s->root);
-    return;
-}
-
-void hurricane(fluxes *f, params *p, state *s) {
-    /* Specifically for the florida simulations - reduce LAI by 40%  */
-
-    double orig_shoot_c, lost_c, lost_n, nc_leaf_litter, lnleaf, fmleaf
-    ;
-    /* Reduce LAI by 40%  */
-    s->lai -= s->lai * 0.4;
-
-    /* adjust C in the foliage */
-    orig_shoot_c = s->shoot;
-    s->shoot = s->lai / (p->sla * M2_AS_HA / KG_AS_TONNES / p->cfracts);
-    lost_c = orig_shoot_c - s->shoot;
-    lost_n = s->shootnc * lost_c;
-    s->shootn -= lost_n;
-
-    /* Drop straight to floor, no retranslocation */
-
-    /* C -> structural */
-    if (float_eq(lost_c, 0.0)) {
-        nc_leaf_litter = 0.0;
-    } else {
-        nc_leaf_litter = lost_n / lost_c;
-    }
-
-    if (float_eq(nc_leaf_litter, 0.0)) {
-        /* catch divide by zero if we have no leaves  */
-        lnleaf = 0.0;
-    } else {
-        lnleaf = p->ligshoot / p->cfracts / nc_leaf_litter;
-    }
-
-    fmleaf = MAX(0.0, 0.85 - (0.018 * lnleaf));
-    f->surf_struct_litter += lost_c * (1.0 - fmleaf);
-
-    /* C -> metabolic */
-    f->surf_metab_litter += lost_c * fmleaf;
-
-    /* N -> structural */
-    if (float_eq(f->surf_struct_litter, 0.0)) {
-        f->n_surf_struct_litter += 0.0;
-    } else {
-        f->n_surf_struct_litter += (lost_n * f->surf_struct_litter *
-                                    p->structrat / f->surf_struct_litter);
-    }
-
-    /* N -> metabolic pools */
-    f->n_surf_metab_litter += lost_n - f->n_surf_struct_litter;
-
-    /* s->structsurf += lost_c; */
-    /* s->structsurfn += lost_n; */
-
-    return;
-}
diff --git a/src/gday.c b/src/gday.c
index 9dfb18b..93b7c50 100644
--- a/src/gday.c
+++ b/src/gday.c
@@ -34,7 +34,6 @@
 #include "phenology.h"
 #include "read_param_file.h"
 #include "read_met_file.h"
-#include "disturbance.h"
 
 int main(int argc, char **argv)
 {
@@ -122,8 +121,6 @@ int main(int argc, char **argv)
     free(m->tsoil);
     free(m->tam);
     free(m->tpm);
-    free(m->tmin);
-    free(m->tmax);
     free(m->vpd_am);
     free(m->vpd_pm);
     free(m->vpd_avg);
@@ -147,12 +144,10 @@ int main(int argc, char **argv)
 
 void run_sim(control *c, fluxes *f, met *m, params *p, state *s){
 
-    int    nyr, doy, window_size, i;
-    int    project_day = 0, fire_found = FALSE;;
-    int    num_disturbance_yrs = 0;
+    int nyr, doy, window_size, i;
+    int project_day = 0;
 
     double fdecay, rdecay, current_limitation, nitfac, year;
-    int   *disturbance_yrs = NULL;
 
     /* potentially allocating 1 extra spot, but will be fine as we always
        index by num_days */
@@ -163,7 +158,6 @@ void run_sim(control *c, fluxes *f, met *m, params *p, state *s){
     }
 
     if (c->deciduous_model) {
-
         /* Are we reading in last years average growing season? */
         if (float_eq(s->avg_alleaf, 0.0) &&
             float_eq(s->avg_alstem, 0.0) &&
@@ -219,7 +213,6 @@ void run_sim(control *c, fluxes *f, met *m, params *p, state *s){
     if (s->prev_sma < -900)
         s->prev_sma = 1.0;
     
-
     /*
         params are defined in per year, needs to be per day. Important this is
         done here as rate constants elsewhere in the code are assumed to be in
@@ -235,15 +228,6 @@ void run_sim(control *c, fluxes *f, met *m, params *p, state *s){
     s->lai = MAX(0.01, (p->sla * M2_AS_HA / KG_AS_TONNES /
                         p->cfracts * s->shoot));
 
-    if (c->disturbance) {
-        if ((disturbance_yrs = (int *)calloc(1, sizeof(double))) == NULL) {
-            fprintf(stderr,"Error allocating space for disturbance_yrs\n");
-    		exit(EXIT_FAILURE);
-        }
-        figure_out_years_with_disturbances(c, m, p, &disturbance_yrs,
-                                           &num_disturbance_yrs);
-    }
-
     /* ====================== **
     **   Y E A R    L O O P   **
     ** ====================== */
@@ -268,6 +252,7 @@ void run_sim(control *c, fluxes *f, met *m, params *p, state *s){
                     sma(SMA_ADD, hw, s->prev_sma);
                 }
             }
+
             zero_stuff(c, s);
         }
         /* =================== **
@@ -278,30 +263,14 @@ void run_sim(control *c, fluxes *f, met *m, params *p, state *s){
 
             calculate_litterfall(c, f, p, s, doy, &fdecay, &rdecay);
 
-            if (c->disturbance && p->disturbance_doy == doy+1) {
-                /* Fire Disturbance? */
-                fire_found = FALSE;
-                fire_found = check_for_fire(c, f, p, s, year, disturbance_yrs,
-                                            num_disturbance_yrs);
-
-                if (fire_found) {
-                    fire(c, f, p, s);
-                    sma(SMA_FREE, hw);
-                    hw = sma(SMA_NEW, p->growing_seas_len).handle;
-                }
-            } else if (c->hurricane &&
-                p->hurricane_yr == year &&
-                p->hurricane_doy == doy) {
-                /* Hurricane? */
-                hurricane(f, p, s);
-            }
-
             calc_day_growth(c, f, m, p, s, project_day, day_length[doy],
                             doy, fdecay, rdecay);
 
             calculate_csoil_flows(c, f, p, s, m->tsoil[project_day], doy);
             calculate_nsoil_flows(c, f, p, s, m->ndep[project_day], doy);
 
+            /*printf("%f\n", f->gpp*100.);*/
+
             /* update stress SMA */
             if (c->deciduous_model && s->leaf_out_days[doy] > 0.0) {
                  /*Allocation is annually for deciduous "tree" model, but we
@@ -322,7 +291,7 @@ void run_sim(control *c, fluxes *f, met *m, params *p, state *s){
                 if grazing took place need to reset "stress" running mean
                 calculation for grasses
             */
-            if (c->grazing == 2 && p->disturbance_doy == doy+1) {
+            if (c->grazing == 2 && p->disturbance_doy == doy) {
                 sma(SMA_FREE, hw);
                 hw = sma(SMA_NEW, p->growing_seas_len).handle;
             }
@@ -341,6 +310,7 @@ void run_sim(control *c, fluxes *f, met *m, params *p, state *s){
                     write_daily_outputs_binary(c, f, s, year, doy+1);
             }
 
+
             /* check the daily water balance */
             /*check_water_balance(project_day); */
 
@@ -349,8 +319,7 @@ void run_sim(control *c, fluxes *f, met *m, params *p, state *s){
             **   E N D   O F   D A Y   **
             ** ======================= */
         }
-
-
+        
         /* Allocate stored C&N for the following year */
         if (c->deciduous_model) {
             calculate_average_alloc_fractions(f, s, p->growing_seas_len);
@@ -369,9 +338,6 @@ void run_sim(control *c, fluxes *f, met *m, params *p, state *s){
 
     sma(SMA_FREE, hw);
     free(day_length);
-    if (c->disturbance) {
-        free(disturbance_yrs);
-    }
 
     return;
 
@@ -394,7 +360,7 @@ void spin_up_pools(control *c, fluxes *f, met *m, params *p, state *s){
     double tol = 5E-03;
     double prev_plantc = 99999.9;
     double prev_soilc = 99999.9;
-    int i, cntrl_flag;
+    int i;
     /* check for convergences in units of kg/m2 */
     double conv = TONNES_HA_2_KG_M2;
 
@@ -402,17 +368,6 @@ void spin_up_pools(control *c, fluxes *f, met *m, params *p, state *s){
     /* Final state + param file */
     open_output_file(c, c->out_param_fname, &(c->ofp));
 
-    /* If we are prescribing disturbance, first allow the forest to establish */
-    if (c->disturbance) {
-        cntrl_flag = c->disturbance;
-        c->disturbance = FALSE;
-        /*  200 years (50 yrs x 4 cycles) */
-        for (i = 0; i < 4; i++) {
-            run_sim(c, f, m, p, s); /* run GDAY */
-        }
-        c->disturbance = cntrl_flag;
-    }
-
     fprintf(stderr, "Spinning up the model...\n");
     while (TRUE) {
         if (fabs((prev_plantc*conv) - (s->plantc*conv)) < tol &&
diff --git a/src/include/disturbance.h b/src/include/disturbance.h
deleted file mode 100644
index 4c4dff8..0000000
--- a/src/include/disturbance.h
+++ /dev/null
@@ -1,16 +0,0 @@
-#ifndef DISTURBANCE_H
-#define DISTURBANCE_H
-
-#include "gday.h"
-#include "constants.h"
-#include "utilities.h"
-
-
-void figure_out_years_with_disturbances(control *, met *, params *, int **,
-                                        int *);
-int  time_till_next_disturbance();
-int  check_for_fire(control *, fluxes *f, params *, state *, int, int *, int);
-void fire(control *, fluxes *f, params *, state *);
-void hurricane(fluxes *, params *, state *);
-
-#endif /* DISTURBANCE_H */
diff --git a/src/include/gday.h b/src/include/gday.h
index d1f15ab..f406325 100644
--- a/src/include/gday.h
+++ b/src/include/gday.h
@@ -68,12 +68,12 @@ typedef struct {
     char  out_fname_hdr[STRING_LENGTH];
     char  out_param_fname[STRING_LENGTH];
     char  git_hash[STRING_LENGTH];
-    int   adjust_rtslow;
     int   alloc_model;
     int   assim_model;
     int   calc_sw_params;
     int   deciduous_model;
     int   disturbance;
+    int   exudation;
     int   fixed_stem_nc;
     int   fixleafnc;
     int   grazing;
@@ -97,8 +97,6 @@ typedef struct {
     char  git_code_ver[STRING_LENGTH];
     int   spin_up;
     int   PRINT_GIT;
-    int   hurricane;
-    int   exudation;
 } control;
 
 
@@ -120,6 +118,10 @@ typedef struct {
     double inorgn;                      /* Inorganic soil N pool - dynamic (t/ha) */
     double lai;                         /* leaf area index m2 (leaf) m-2 (ground) */
     double fipar;
+    double max_lai;
+    double last_yrs_max_lai;
+    double max_shoot;
+    double last_yrs_max_shoot;
     double metabsoil;                   /* metabolic soil c (t/ha) */
     double metabsoiln;                  /* metabolic soil n (t/ha) */
     double metabsurf;                   /* metabolic surface c (t/ha) */
@@ -317,6 +319,7 @@ typedef struct {
     double rdecaydry;                       /* root turnover rate - dry soil (1/yr) */
     double retransmob;                      /* Fraction stem mobile N retranscd (/yr) */
     double rfmult;
+    double root_exu_CUE;
     double rooting_depth;                   /* Rooting depth (mm) */
     char   rootsoil_type[STRING_LENGTH];
     double rretrans;                        /* root n retranslocation fraction */
@@ -351,13 +354,6 @@ typedef struct {
     double decayrate[7];
     double fmfaeces;
     int    growing_seas_len;
-    double prime_y;
-    double prime_z;
-    int    return_interval;                 /* years */
-    int    burn_specific_yr;
-    int    hurricane_doy;
-    int    hurricane_yr;
-    double root_exu_CUE;
 } params;
 
 typedef struct {
@@ -369,9 +365,6 @@ typedef struct {
     double *tsoil;
     double *tam;
     double *tpm;
-    double *tmin;
-    double *tmax;
-    double *tday;
     double *vpd_am;
     double *vpd_pm;
     double *vpd_avg;
@@ -544,14 +537,6 @@ typedef struct {
     double wnimrate;
     double wnmobrate;
     double cnrate;
-
-    /* priming/exudation */
-    double root_exc;
-    double root_exn;
-    double co2_released_exud;
-    double factive;
-    double rtslow;
-    double rexc_cue;
 } fluxes;
 
 
diff --git a/src/include/phenology.h b/src/include/phenology.h
index a64c742..c7edc8a 100644
--- a/src/include/phenology.h
+++ b/src/include/phenology.h
@@ -4,15 +4,14 @@
 #include "gday.h"
 
 void    phenology(control *, fluxes *, met *, params *, state *, double *, int);
-void    calculate_leafon_off(control *, met *, params *, double *, double, 
-                             double, double, double, int, int *, int *, 
-                             int *, int *, double);
+void    calculate_leafon_off(control *, met *, params *, double *, int, double,
+                          double, double, int *, int *, int *);
 double  calc_gdd(double);
 double  gdd_chill_thresh(double, double, double, double);
 double  calc_ncd(double);
 double  leaf_drop(double, double, double);
 void    calc_ini_grass_pheno_stuff(control *, met *, int, double *, double *,
-                                   double *, double *);
+                                double *);
 void    calculate_growing_season_fluxes(fluxes *f, state *, int);
 void    calculate_days_left_in_growing_season(control *, state *, int, int, int);
 
diff --git a/src/include/plant_growth.h b/src/include/plant_growth.h
index 48d6119..edcab79 100644
--- a/src/include/plant_growth.h
+++ b/src/include/plant_growth.h
@@ -41,8 +41,8 @@ double nitrogen_retrans(control *, fluxes *, params *, state *,
 void   calculate_ncwood_ratios(control *c, params *, state *, double, double *,
                               double *, double *, double *);
 
-/* Priming/Exudation stuff */
-void   calc_root_exudation_release(fluxes *, state *);
+/* Water stuff */
+
 
 /* misc */
 
diff --git a/src/include/soils.h b/src/include/soils.h
index 34dc77e..4ff1304 100644
--- a/src/include/soils.h
+++ b/src/include/soils.h
@@ -46,10 +46,4 @@ void   calculate_npools(control *c, fluxes *, params *, state *, double,
 double nc_limit(fluxes *, double, double, double, double);
 double nc_flux(double, double, double);
 void   precision_control_soil_n(fluxes *, state *);
-
-/* priming/exudation */
-void calc_root_exudation_uptake_of_C(fluxes *, params *, state *);
-void calc_root_exudation_uptake_of_N(fluxes *, state *);
-void adjust_residence_time_of_slow_pool(fluxes *, params *);
-
 #endif /* SOILS_H */
diff --git a/src/initialise_model.c b/src/initialise_model.c
index 70524ad..a5e588f 100644
--- a/src/initialise_model.c
+++ b/src/initialise_model.c
@@ -402,6 +402,8 @@ void initialise_state(state *s) {
     s->crootn = 0.0;
     s->cstore = 0.01;
     s->inorgn = 0.0274523714275;
+    s->max_lai = -999.9;
+    s->max_shoot = -999.9;
     s->metabsoil = 0.135656771805;
     s->metabsoiln = 0.00542627087221;
     s->metabsurf = 0.0336324759951;
diff --git a/src/mate.c b/src/mate.c
index 1eddf8b..28367ed 100644
--- a/src/mate.c
+++ b/src/mate.c
@@ -52,7 +52,7 @@ void mate_C3_photosynthesis(control *c, fluxes *f, met *m, params *p, state *s,
 
     /* Calculate mate params & account for temperature dependencies */
     N0 = calculate_top_of_canopy_n(p, s, ncontent);
-    
+
     gamma_star_am = calculate_co2_compensation_point(p, Tk_am, mt);
     gamma_star_pm = calculate_co2_compensation_point(p, Tk_pm, mt);
 
@@ -602,7 +602,6 @@ void mate_C4_photosynthesis(control *c, fluxes *f, met *m, params *p, state *s,
     calculate_vcmax_parameter(p, s, Tk_am, N0, &vcmax_am, &vcmax25_am, mt);
     calculate_vcmax_parameter(p, s, Tk_pm, N0, &vcmax_pm, &vcmax25_pm, mt);
 
-
     /* Rubisco and light-limited capacity (Appendix, 2B) */
     par_per_sec = par / (60.0 * 60.0 * daylen);
     M_am = quadratic(beta1, -(vcmax_am + p->alpha_c4 * par_per_sec),
@@ -649,6 +648,9 @@ void mate_C4_photosynthesis(control *c, fluxes *f, met *m, params *p, state *s,
     f->gpp = f->gpp_gCm2 * GRAM_C_2_TONNES_HA;
     f->npp = f->npp_gCm2 * GRAM_C_2_TONNES_HA;
 
+    /* Plant respiration assuming carbon-use efficiency. */
+    f->auto_resp = f->gpp - f->npp;
+
     return;
 }
 
diff --git a/src/phenology.c b/src/phenology.c
index 615f395..ff5f453 100644
--- a/src/phenology.c
+++ b/src/phenology.c
@@ -47,10 +47,30 @@ void phenology(control *c, fluxes *f, met *m, params *p, state *s,
     double pc = -0.01;
 
     int leaf_on = 0, leaf_off = 0, len_groloss = 0.0;
-    int leaf_on_found, leaf_off_found;
-    double grass_temp_threshold, tmax_ann, Tmin_avg, ppt_sum_crit, gdd_thresh;
-    
-    
+
+    calculate_leafon_off(c, m, p, daylen, project_day, pa, pb, pc, &leaf_on,
+                         &leaf_off, &len_groloss);
+
+    calculate_days_left_in_growing_season(c, s, leaf_on, leaf_off, len_groloss);
+    calculate_growing_season_fluxes(f, s, len_groloss);
+
+    return;
+}
+
+void calculate_leafon_off(control *c, met *m, params *p, double *daylen,
+                         int project_day, double pa, double pb, double pc,
+                         int *leaf_on, int *leaf_off, int *len_groloss) {
+
+    double grass_temp_threshold, tmax_ann, ppt_sum_crit, ppt_sum_next, ppt_sum,
+           ppt_sum_prev, Tmean, Tsoil, Tsoil_next_3days, Tair_next_3days,
+           gdd_thresh;
+    double accumulated_ncd = 0.0;
+    double accum_gdd = 0.0;
+    int    leaf_on_found = FALSE;
+    int    leaf_off_found = FALSE;
+    int    drop_leaves = FALSE;
+    int    d, dd, st, en, nov_doy;
+
     /*
         Krinner et al. 2005, page 26, alternatively Foley et al. 1996 suggests
         the same value = 100 for both pathways
@@ -61,97 +81,20 @@ void phenology(control *c, fluxes *f, met *m, params *p, state *s,
         else if (c->ps_pathway == C4)
             gdd_thresh = 400.;
         calc_ini_grass_pheno_stuff(c, m, project_day, &grass_temp_threshold,
-                                   &tmax_ann, &Tmin_avg, &ppt_sum_crit);
+                                   &tmax_ann, &ppt_sum_crit);
     } else {
         gdd_thresh = gdd_chill_thresh(pa, pb, pc, p->previous_ncd);
     }
-    
-    
-    calculate_leafon_off(c, m, p, daylen, grass_temp_threshold, tmax_ann, 
-                         Tmin_avg, ppt_sum_crit, project_day, 
-                         &leaf_on, &leaf_off, &leaf_on_found, 
-                         &leaf_off_found, gdd_thresh);
-   
-    /*
-        No leaf drop found, try a warmer temperature i.e. 5 instead of 0,
-        if this doesn't work there really is an issue (or there is no leaf
-        drop and we have an evergreen grass...
-    */  
-    if (leaf_off_found == FALSE) {
-        grass_temp_threshold = 5.0;
-        calculate_leafon_off(c, m, p, daylen, grass_temp_threshold, tmax_ann, 
-                             Tmin_avg, ppt_sum_crit, project_day,  
-                             &leaf_on, &leaf_off, &leaf_on_found, 
-                             &leaf_off_found, gdd_thresh);
-    }
-    
-    /*
-        if widening the temperature threshold didn't produce a suitable leaf
-        drop date we will follow biome-bgc and assume the leaves fall on the 
-        last day
-    */
-    if (leaf_off_found == FALSE) {
-        leaf_off = 364;
-    }
-    
-    
-    
-    if (leaf_on_found == FALSE) {
-        fprintf(stderr, "Problem in phenology leaf *ON* not found\n");
-        exit(EXIT_FAILURE);
-    }
-    
-    
-    /*
-        Length of time taken for new growth from storage to be allocated.
-        This is either some site-specific calibration or the midpoint of the
-        length of the growing season. The litterfall takes place over an
-        identical period. Dividing by a larger number would increase the
-        rate the C&N is allocated.
-    */
-    p->growing_seas_len = leaf_off - leaf_on;
-    if (p->store_transfer_len < -900)
-        len_groloss = (int)floor((float)p->growing_seas_len / 2.0);
-    else
-        len_groloss = p->store_transfer_len;
-
-    calculate_days_left_in_growing_season(c, s, leaf_on, leaf_off, len_groloss);
-    calculate_growing_season_fluxes(f, s, len_groloss);
-    
-    /*printf("%d %d\n", leaf_on, leaf_off); */
-    
-    return;
-}
 
-void calculate_leafon_off(control *c, met *m, params *p, double *daylen,
-                          double grass_temp_threshold, double tmax_ann, 
-                          double Tmin_avg, double ppt_sum_crit,
-                          int project_day, int *leaf_on, int *leaf_off, 
-                          int *leaf_on_found, int *leaf_off_found, 
-                          double gdd_thresh) {
-
-    double ppt_sum_next, ppt_sum, ppt_sum_prev, Tmean, Tsoil, Tsoil_next_3days, 
-           Tair_next_3days, Tmin_boxcar, Tmax, Tday;
-    double accumulated_ncd = 0.0;
-    double accum_gdd = 0.0;
-    int    drop_leaves = FALSE;
-    int    d, dd, st, en, nov_doy;
-    int project_day_save = project_day;
-    
-    *leaf_on_found = FALSE;
-    *leaf_off_found = FALSE;
-    
     if (c->num_days == 366)
         nov_doy = 306;
     else
         nov_doy = 305;
-    
+
     ppt_sum = 0.0;
     for (d = 1; d < c->num_days+1; d++) {
         Tmean = m->tair[project_day];
-        Tday = m->tday[project_day];
         Tsoil = m->tsoil[project_day];
-        Tmax = m->tmax[project_day];
         ppt_sum += m->rain[project_day];
 
         /* Calculate ppt total from the next 7 days */
@@ -187,11 +130,6 @@ void calculate_leafon_off(control *c, met *m, params *p, double *daylen,
             Tair_next_3days = ((m->tair[project_day] +
                                 m->tair[project_day+1] +
                                 m->tair[project_day+2]) / 3.0);
-            
-            Tmin_boxcar = ((m->tmin[project_day-1] +
-                            m->tmin[project_day] +
-                            m->tmin[project_day+1]) / 3.0);
-                                
         } else {
             /* i.e. end of year, didn't find this so have no effect */
             Tsoil_next_3days = 999.9;
@@ -205,17 +143,17 @@ void calculate_leafon_off(control *c, met *m, params *p, double *daylen,
         ** Calculate leaf on
         */
         if (c->alloc_model == GRASSES) {
-            if (*leaf_on_found == FALSE &&
+            if (leaf_on_found == FALSE &&
                 accum_gdd >= gdd_thresh &&
                 ppt_sum >= ppt_sum_crit) {
 
                 *leaf_on = d;
-                *leaf_on_found = TRUE;
+                leaf_on_found = TRUE;
             }
         } else {
-            if (*leaf_on_found == FALSE && accum_gdd >= gdd_thresh) {
+            if (leaf_on_found == FALSE && accum_gdd >= gdd_thresh) {
                   *leaf_on = d;
-                  *leaf_on_found = TRUE;
+                  leaf_on_found = TRUE;
             }
         }
 
@@ -223,52 +161,27 @@ void calculate_leafon_off(control *c, met *m, params *p, double *daylen,
         ** Calculate leaf off
         */
         if (c->alloc_model == GRASSES) {
-            if (*leaf_off_found == FALSE) {
-                
-                /* 
-                    Leaf drop constraint is based on Foley et al. 1996
-                    
-                    The 243 is just a safe guard to make sure we avoid 
-                    predicting offset in late spring (White et al. 1997). 
-                    
-                    This Tmean is the mean daytime temp, but I wonder if it 
-                    should be the full 24 daytime temp mean?
-                */
-                
-                /*if (d >= 243) {
-                    printf("%d %f %f\n", d, Tmean, grass_temp_threshold);
-                }*/
-                if (d >= 243 && Tday <= grass_temp_threshold) {
-                    *leaf_off_found = TRUE;
-                    *leaf_off = d;
-                }
-                
-                
-                /* 
-                    Leaf drop constraint is based on White et al. 1997 
-                
-                     - test for hot && dry conditions.  
-                
+            if (leaf_off_found == FALSE) {
+                /* test for hot && dry conditions, based on white et al. 1997 */
                 if (ppt_sum_prev < 11.4 &&
                     ppt_sum_next < 9.7 &&
-                    Tmax > tmax_ann && 
-                    d > 243) {
-                    
-                    *leaf_off_found = TRUE;
+                    Tmean > tmax_ann) {
+
+                    leaf_off_found = TRUE;
+                    *leaf_off = d;
+                } else if (d > 182 && Tair_next_3days < grass_temp_threshold) {
+                    /*
+                        test for cold offset condition
+                        Leaf drop constraint is based on Foley et al. 1996 as
+                        we dont have access to the Tmin for the constraint from
+                        White et al. This is likely more straightforward anyway
+                    */
+                    leaf_off_found = TRUE;
                     *leaf_off = d;
-                
-                    - test for cold offset condition 
-                } else if (d > 243 && Tmin_boxcar <= Tmin_avg) {
-                    
-                    *leaf_off_found = TRUE;
-                    *leaf_off = d; 
-                     
                 }
-                */
-                
             }
         } else {
-            if (*leaf_off_found == FALSE && accum_gdd >= gdd_thresh) {
+            if (leaf_off_found == FALSE && accum_gdd >= gdd_thresh) {
                 /*
                     I am prescribing that no leaves can fall off before doy=180
                     Had issue with KSCO simulations where the photoperiod was
@@ -277,7 +190,7 @@ void calculate_leafon_off(control *c, met *m, params *p, double *daylen,
                 if (d > 182) {
                     drop_leaves = leaf_drop(daylen[d-1], Tsoil, Tsoil_next_3days);
                     if (drop_leaves) {
-                        *leaf_off_found = TRUE;
+                        leaf_off_found = TRUE;
                         *leaf_off = d;
                     }
                 }
@@ -288,15 +201,29 @@ void calculate_leafon_off(control *c, met *m, params *p, double *daylen,
             accumulated_ncd += calc_ncd(Tmean);
         project_day++;
     }
-    
-    
+
     /* updated stored param, note this will be written out if the user
        dumps the current state, which makes sense as we may want pass the
        stat between spinup and a simulation */
     p->previous_ncd = accumulated_ncd;
 
-    
-    
+    /*
+        Length of time taken for new growth from storage to be allocated.
+        This is either some site-specific calibration or the midpoint of the
+        length of the growing season. The litterfall takes place over an
+        identical period. Dividing by a larger number would increase the
+        rate the C&N is allocated.
+    */
+    p->growing_seas_len = *leaf_off - *leaf_on;
+    if (p->store_transfer_len < -900)
+        *len_groloss = (int)floor((float)p->growing_seas_len / 2.0);
+    else
+        *len_groloss = p->store_transfer_len;
+
+    if (leaf_on_found == FALSE || leaf_off_found == FALSE) {
+        fprintf(stderr, "Problem in phenology leaf on/off not found\n");
+        exit(EXIT_FAILURE);
+    }
     return;
 }
 
@@ -350,74 +277,64 @@ double leaf_drop(double daylen, double Tsoil, double Tsoil_next_3days) {
 
 void calc_ini_grass_pheno_stuff(control *c, met *m, int project_day,
                                 double *grass_temp_threshold,
-                                double *tmax_ann, double *Tmin_avg, 
-                                double *ppt_sum_crit) {
+                                double *tmax_ann, double *ppt_sum_crit) {
     /*
         Series of constraints based on temp && precip need to be
         pre-calculated for grasses to determine leaf on/off
     */
-    
+
     /*
         Save this as we need to loop over the data once to pre-calculate
         everything
     */
     int project_day_save = project_day, d;
     *tmax_ann = 0.0;
-    *Tmin_avg = 0.0;
     double tmin_ann = 70.0;
     double tavg_ann = 0.0;
     double ppt_sum = 0.0;
-    double tair, tam, tpm, tmin, tmax, Trange;
-    
+    double tair, tam, tpm, Trange;
+
     for (d = 0; d < c->num_days; d++) {
         tair = m->tair[project_day];
         tam = m->tam[project_day];
         tpm = m->tpm[project_day];
-        tmax = m->tmax[project_day];
-        tmin = m->tmin[project_day];
         ppt_sum += m->rain[project_day];
-        *Tmin_avg += m->tmin[project_day]; 
-        
-        if (tmax > *tmax_ann)
-           *tmax_ann = tmax;
 
-        if (tmin < tmin_ann)
-           tmin_ann = tmin;
+        if (tair > *tmax_ann)
+           *tmax_ann = tair;
+
+        if (tair < tmin_ann)
+           tmin_ann = tair;
 
         tavg_ann += tair;
         project_day += 1;
     }
-    *Tmin_avg /= (float)c->num_days;
-    
+
     /* reset date index */
     project_day = project_day_save;
 
     Trange = *tmax_ann - tmin_ann;
     tavg_ann /= c->num_days;
-    
+
     /*
         Cool or warm grassland Definitions are from Botta, Table 1, pg 712.
-        But grass temp thresholds are from Foley et al.
+        But thresholds are from Foley et al.
     */
-    
-    /* cool */
     if (Trange > 20.0 || tmin_ann < 5.0)
-        *grass_temp_threshold = 0.0; 
-    
-    /* warm */
+        *grass_temp_threshold = 0.0; /* cool */
     else if (Trange <= 20.0 || tmin_ann >= 5.0)
-        *grass_temp_threshold = 5.0;  
+        *grass_temp_threshold = 5.0;  /* warm */
     else {
         fprintf(stderr, "Problem grass thresholds\n");
         exit(EXIT_FAILURE);
     }
-    
+
     /*
         92% of tmax_ann is the threshold used in grass offset below
         Note this has to be done below the range calcs as they use the tmax
     */
     *tmax_ann *= 0.92;
-    
+
     /*
         Based on White et al. 1997 this is a threshold for grasses so they
         have enough accumulated rain. It is essentially a fudge for soil
diff --git a/src/plant_growth.c b/src/plant_growth.c
index 335e4f6..450f97f 100644
--- a/src/plant_growth.c
+++ b/src/plant_growth.c
@@ -77,10 +77,6 @@ void calc_day_growth(control *c, fluxes *f, met *m, params *p, state *s,
     recalc_wb = nitrogen_allocation(c, f, p, s, ncbnew, nccnew, ncwimm, ncwnew,
                                     fdecay, rdecay, doy);
 
-    if (c->exudation) {
-        calc_root_exudation_release(f, s);
-    }
-
     /* If we didn't have enough N available to satisfy wood demand, NPP
        is down-regulated and thus so is GPP. We also need to recalculate the
        water balance given the lower GPP. */
@@ -96,39 +92,7 @@ void calc_day_growth(control *c, fluxes *f, met *m, params *p, state *s,
     return;
 }
 
-void calc_root_exudation_release(fluxes *f, state *s) {
-    /* Root exudation modelled to occur: with (1) fine root growth or (2)
-       as a result of excess C. A fraction of fine root growth is allocated
-       to stimulate exudation. This fraction increases with N stress. */
-    double leaf_CN, frac_to_rexc, presc_leaf_CN, fine_root_NC;
-
-    if (float_eq(s->shoot, 0.0) || float_eq(s->shootn, 0.0)) {
-        /* nothing happens during leaf off period */
-        leaf_CN = 0.0;
-        frac_to_rexc = 0.0;
-    } else {
-        leaf_CN = 1.0 / s->shootnc;
-        presc_leaf_CN = 30.0; /* make a parameter */
-
-        /* fraction varies between 0 and 50 % as a function of leaf CN */
-        frac_to_rexc = MAX(0.0, MIN(0.5, (leaf_CN / presc_leaf_CN) - 1.0));
-    }
-
-    f->root_exc = frac_to_rexc * f->cproot;
-    if (float_eq(f->cproot, 0.0)) {
-        f->root_exn = 0.0;
-    } else {
-        fine_root_NC = f->nproot / f->cproot;
-        f->root_exn = f->root_exc * fine_root_NC;
-    }
 
-    /* Need to exudation C & N fluxes from fine root growth fluxes so that
-       things balance. */
-    f->cproot -= f->root_exc;
-    f->nproot -= f->root_exn;
-
-    return;
-}
 void carbon_production(control *c, fluxes *f, met *m, params *p, state *s,
                        int project_day, double daylen) {
     /* Calculate GPP, NPP and plant respiration
@@ -185,6 +149,7 @@ void carbon_production(control *c, fluxes *f, met *m, params *p, state *s,
     }
     /* Estimate photosynthesis */
     if (c->assim_model == BEWDY){
+        fprintf(stderr,"Not implemented, use MATE");
         exit(EXIT_FAILURE);
     } else if (c->assim_model == MATE) {
         if (c->ps_pathway == C3) {
@@ -482,6 +447,7 @@ double calculate_growth_stress_limitation(params *p, state *s) {
        that have a flexible bucket depth. Minimum constraint is limited to
        0.1, following Zaehle et al. 2010 (supp), eqn 18. */
     current_limitation = MAX(0.1, MIN(nlim, s->wtfac_root));
+
     return (current_limitation);
 }
 
@@ -570,7 +536,6 @@ void calc_carbon_allocation_fracs(control *c, fluxes *f, params *p, state *s,
         f->albranch = 0.0;
         f->alcroot = 0.0;
 
-
     } else if (c->alloc_model == ALLOMETRIC) {
 
         /* Calculate tree height: allometric reln using the power function
@@ -584,7 +549,11 @@ void calc_carbon_allocation_fracs(control *c, fluxes *f, params *p, state *s,
         arg1 = s->sapwood * TONNES_AS_KG * M2_AS_HA;
         arg2 = s->canht * p->density * p->cfracts;
         sap_cross_sec_area = arg1 / arg2;
-        leaf2sap = s->lai / sap_cross_sec_area;
+
+        if (c->deciduous_model)
+            leaf2sap = s->lai / sap_cross_sec_area;
+        else
+            leaf2sap = s->lai / sap_cross_sec_area;
 
         /* Allocation to leaves dependant on height. Modification of pipe
            theory, leaf-to-sapwood ratio is not constant above a certain
@@ -695,7 +664,6 @@ void calc_carbon_allocation_fracs(control *c, fluxes *f, params *p, state *s,
         exit(EXIT_FAILURE);
     }
 
-    /*printf("%f %f %f %f %f\n", f->alleaf, f->albranch + f->alstem, f->alroot,  f->alcroot, s->canht);*/
 
     /* Total allocation should be one, if not print warning */
     total_alloc = f->alroot + f->alleaf + f->albranch + f->alstem + f->alcroot;
@@ -819,7 +787,6 @@ void update_plant_state(control *c, fluxes *f, params *p, state *s,
         s->sapwood += f->cpstem - f->deadsapwood;
     }
 
-
     /*
     ** Nitrogen pools
     */
@@ -999,7 +966,7 @@ void allocate_stored_c_and_n(fluxes *f, params *p, state *s) {
     for the first time or at the end of each year.
     */
     double ntot;
-    
+
     /* ========================
        Carbon - fixed fractions
        ======================== */
diff --git a/src/read_met_file.c b/src/read_met_file.c
index c979c1e..ebfddb8 100644
--- a/src/read_met_file.c
+++ b/src/read_met_file.c
@@ -6,7 +6,7 @@ void read_met_data(char **argv, control *c, met *m)
     char   line[STRING_LENGTH];
     int    file_len = 0;
     int    i = 0;
-    int    nvars = 23;
+    int    nvars = 20;
     int    skipped_lines = 0;
     double current_yr;
 
@@ -66,21 +66,6 @@ void read_met_data(char **argv, control *c, met *m)
         fprintf(stderr,"Error allocating space for tpm array\n");
 		exit(EXIT_FAILURE);
     }
-    
-    if ((m->tmin = (double *)calloc(c->num_days, sizeof(double))) == NULL) {
-        fprintf(stderr,"Error allocating space for tmin array\n");
-		exit(EXIT_FAILURE);
-    }
-    
-    if ((m->tmax = (double *)calloc(c->num_days, sizeof(double))) == NULL) {
-        fprintf(stderr,"Error allocating space for tmax array\n");
-		exit(EXIT_FAILURE);
-    }
-    
-    if ((m->tday = (double *)calloc(c->num_days, sizeof(double))) == NULL) {
-        fprintf(stderr,"Error allocating space for tday array\n");
-		exit(EXIT_FAILURE);
-    }
 
     if ((m->vpd_am = (double *)calloc(c->num_days, sizeof(double))) == NULL) {
         fprintf(stderr,"Error allocating space for vpd_am array\n");
@@ -160,12 +145,10 @@ void read_met_data(char **argv, control *c, met *m)
                           %lf,%lf,%lf,\
                           %lf,%lf,%lf,\
                           %lf,%lf,%lf,\
-                          %lf,%lf,%lf,\
                           %lf,%lf", \
                           &(m->year[i]), &(m->prjday[i]), &(m->sw_rad[i]), \
                           &(m->tair[i]), &(m->rain[i]), &(m->tsoil[i]), \
-                          &(m->tam[i]), &(m->tpm[i]), &(m->tmin[i]), \
-                          &(m->tmax[i]), &(m->tday[i]), &(m->vpd_am[i]), \
+                          &(m->tam[i]), &(m->tpm[i]), &(m->vpd_am[i]), \
                           &(m->vpd_pm[i]), &(m->vpd_avg[i]), &(m->co2[i]), \
                           &(m->ndep[i]), &(m->wind[i]), &(m->press[i]), \
                           &(m->par[i]), &(m->wind_am[i]), &(m->wind_pm[i]), \
diff --git a/src/read_param_file.c b/src/read_param_file.c
index 6f64544..adc6f7b 100644
--- a/src/read_param_file.c
+++ b/src/read_param_file.c
@@ -128,20 +128,7 @@ int handler(char *section, char *name, char *value, control *c,
     /*
     ** CONTROL
     */
-    if (MATCH("control", "adjust_rtslow")) {
-        if (strcmp(temp, "False") == 0 ||
-            strcmp(temp, "FALSE") == 0 ||
-            strcmp(temp, "false") == 0)
-            c->adjust_rtslow = FALSE;
-        else if (strcmp(temp, "True") == 0 ||
-            strcmp(temp, "TRUE") == 0 ||
-            strcmp(temp, "true") == 0)
-            c->adjust_rtslow = TRUE;
-        else {
-            fprintf(stderr, "Unknown adjust_rtslow option: %s\n", temp);
-            exit(EXIT_FAILURE);
-        }
-    } else if (MATCH("control", "alloc_model")) {
+    if (MATCH("control", "alloc_model")) {
         if (strcmp(temp, "FIXED") == 0||
             strcmp(temp, "fixed") == 0)
             c->alloc_model = FIXED;
@@ -192,32 +179,6 @@ int handler(char *section, char *name, char *value, control *c,
             fprintf(stderr, "Unknown deciduous option: %s\n", temp);
             exit(EXIT_FAILURE);
         }
-    } else if (MATCH("control", "disturbance")) {
-        if (strcmp(temp, "False") == 0 ||
-            strcmp(temp, "FALSE") == 0 ||
-            strcmp(temp, "false") == 0)
-            c->disturbance = FALSE;
-        else if (strcmp(temp, "True") == 0 ||
-            strcmp(temp, "TRUE") == 0 ||
-            strcmp(temp, "true") == 0)
-            c->disturbance = TRUE;
-        else {
-            fprintf(stderr, "Unknown disturbance option: %s\n", temp);
-            exit(EXIT_FAILURE);
-        }
-    } else if (MATCH("control", "exudation")) {
-            if (strcmp(temp, "False") == 0 ||
-                strcmp(temp, "FALSE") == 0 ||
-                strcmp(temp, "false") == 0)
-                c->exudation = FALSE;
-            else if (strcmp(temp, "True") == 0 ||
-                strcmp(temp, "TRUE") == 0 ||
-                strcmp(temp, "true") == 0)
-                c->exudation = TRUE;
-            else {
-                fprintf(stderr, "Unknown exudation option: %s\n", temp);
-                exit(EXIT_FAILURE);
-            }
     } else if (MATCH("control", "fixed_stem_nc")) {
         if (strcmp(temp, "False") == 0 ||
             strcmp(temp, "FALSE") == 0 ||
@@ -254,19 +215,6 @@ int handler(char *section, char *name, char *value, control *c,
             fprintf(stderr, "Unknown gs model: %s\n", temp);
             exit(EXIT_FAILURE);
         }
-    } else if (MATCH("control", "hurricane")) {
-        if (strcmp(temp, "False") == 0 ||
-            strcmp(temp, "FALSE") == 0 ||
-            strcmp(temp, "false") == 0)
-            c->hurricane = FALSE;
-        else if (strcmp(temp, "True") == 0 ||
-            strcmp(temp, "TRUE") == 0 ||
-            strcmp(temp, "true") == 0)
-            c->hurricane = TRUE;
-        else {
-            fprintf(stderr, "Unknown hurricane option: %s\n", temp);
-            exit(EXIT_FAILURE);
-        }
     } else if (MATCH("control", "model_optroot")) {
         if (strcmp(temp, "False") == 0 ||
             strcmp(temp, "FALSE") == 0 ||
@@ -732,10 +680,6 @@ int handler(char *section, char *name, char *value, control *c,
         p->psi_sat_root = atof(value);
     } else if (MATCH("params", "psi_sat_topsoil")) {
         p->psi_sat_topsoil = atof(value);
-    } else if (MATCH("params", "prime_y")) {
-        p->prime_y = atof(value);
-    } else if (MATCH("params", "prime_z")) {
-        p->prime_z = atof(value);
     } else if (MATCH("params", "qs")) {
         p->qs = atof(value);
     } else if (MATCH("params", "r0")) {
@@ -756,8 +700,6 @@ int handler(char *section, char *name, char *value, control *c,
         p->rooting_depth = atof(value);
     } else if (MATCH("params", "rootsoil_type")) {
         strcpy(p->rootsoil_type, value);
-    } else if (MATCH("params", "root_exu_CUE")) {
-        p->root_exu_CUE = atof(value);
     } else if (MATCH("params", "rretrans")) {
         p->rretrans = atof(value);
     } else if (MATCH("params", "sapturnover")) {
diff --git a/src/soils.c b/src/soils.c
index aea7cc1..7602b9c 100644
--- a/src/soils.c
+++ b/src/soils.c
@@ -73,57 +73,10 @@ void calculate_csoil_flows(control *c, fluxes *f, params *p, state *s,
 
     /* switch off grazing if this was just activated as an annual event */
     c->grazing = cntrl_grazing;
-
-    if (c->exudation) {
-        calc_root_exudation_uptake_of_C(f, p, s);
-    }
-
-    return;
-}
-
-void calc_root_exudation_uptake_of_C(fluxes *f, params *p, state *s) {
-    /* The amount of C which enters the active pool varies according to the
-    CUE of SOM in response to root exudation (REXCUE). REXCUE determines
-    the fraction of REXC that enters the active pool as C. The remaining
-    flux is respired.
-
-
-    REXCUE determines which fraction of REXC enters the active pool as C
-    (delta_Cact). The remaining fraction of REXC is respired as CO2.
-
-    */
-    double active_CN, rex_NC, C_to_active_pool;
-
-    active_CN = s->activesoil / s->activesoiln;
-
-    if (p->root_exu_CUE < -0.5) {
-        /*
-            flexible cue
-             - The constraint of 0.3<=REXCUE<=0.6 is based on observations of
-               the physical limits of microbes
-        */
-
-        if (float_eq(f->root_exc, 0.0)) {
-            rex_NC = 0.0;
-        } else {
-            rex_NC = f->root_exn / f->root_exc;
-        }
-        f->rexc_cue = MAX(0.3, MIN(0.6, rex_NC * active_CN));
-    } else {
-        f->rexc_cue = p->root_exu_CUE;
-    }
-
-    C_to_active_pool = f->root_exc * f->rexc_cue;
-    s->activesoil += C_to_active_pool;
-
-    /* update respiration fluxes. */
-    f->co2_released_exud = f->root_exc * (1.0 - f->rexc_cue);
-    f->hetero_resp += f->co2_released_exud;
-
+    
     return;
 }
 
-
 void calculate_decay_rates(fluxes *f, params *p, state *s) {
     /* Model decay rates - decomposition rates have a strong temperature
     and moisture dependency. Note same temperature is assumed for all 3
@@ -546,6 +499,10 @@ void precision_control_soil_c(fluxes *f, state *s) {
 void calculate_nsoil_flows(control *c, fluxes *f, params *p, state *s,
                            double ndep, int doy) {
 
+    /* Fraction of C lost due to microbial respiration */
+    double frac_microb_resp = 0.85 - (0.68 * p->finesoil);
+    double nsurf, nsoil, active_nc_slope, slow_nc_slope, passive_nc_slope;
+
     /* need to store grazing flag. Allows us to switch on the annual
        grazing event, but turn it off for every other day of the year.  */
     int cntrl_grazing = c->grazing;
@@ -553,10 +510,6 @@ void calculate_nsoil_flows(control *c, fluxes *f, params *p, state *s,
         c->grazing = TRUE;
     }
 
-    /* Fraction of C lost due to microbial respiration */
-    double frac_microb_resp = 0.85 - (0.68 * p->finesoil);
-    double nsurf, nsoil, active_nc_slope, slow_nc_slope, passive_nc_slope;
-
     grazer_inputs(c, f, p);
     inputs_from_plant_litter(f, p, &nsurf, &nsoil);
     partition_plant_litter_n(c, f, p, nsurf, nsoil);
@@ -586,81 +539,6 @@ void calculate_nsoil_flows(control *c, fluxes *f, params *p, state *s,
     /* switch off grazing if this was just activated as an annual event */
     c->grazing = cntrl_grazing;
 
-    if (c->exudation) {
-        calc_root_exudation_uptake_of_N(f, s);
-    }
-
-    if (c->adjust_rtslow) {
-        adjust_residence_time_of_slow_pool(f, p);
-    }
-
-    return;
-}
-
-void calc_root_exudation_uptake_of_N(fluxes *f, state *s) {
-    /* When N mineralisation is large enough to allow a small amount of N
-    immobilisation, the amount of N which enters the active pool is
-    calculated according to REXC divided by the CN of the active pool. When
-    exudation enters the active pool, the CN ratio of the exudates drops
-    from REXC/REXN to the CN of the active pool. Which is consistent with
-    the CENTURY framework, where C flows between pools lead to either
-    mineralisation (N gain) or immobilisation (N loss) due to differences
-    in the CN ratio of the outgoing and incoming pools.
-
-    The amount of N added to the active pool is independent of the CUE of
-    the microbial pool in response to root exudation (REXCUE).
-    */
-    double N_available, active_NC_ratio, delta_Nact, N_miss, N_to_active_pool;
-
-    N_available = f->nmineralisation;
-
-    active_NC_ratio = s->activesoiln / s->activesoil;
-    delta_Nact = f->root_exc * f->rexc_cue * active_NC_ratio;
-
-    N_miss = delta_Nact - f->root_exn;
-    if (N_miss <= 0.0) {
-        N_to_active_pool = f->root_exn;
-    } else if (N_miss <= N_available) {
-        f->nmineralisation -= N_miss;
-        N_to_active_pool = f->root_exn + N_miss;
-    } else if (f->nmineralisation <= N_miss) {
-        N_to_active_pool = f->root_exn + N_available;
-        f->nmineralisation = 0.0;
-    }
-
-    /* update active pool */
-    s->activesoiln += N_to_active_pool;
-
-    return;
-}
-
-void adjust_residence_time_of_slow_pool(fluxes *f, params *p) {
-    /* Priming simulations the residence time of the slow pool is flexible,
-    as the flux out of the active pool (factive) increases the residence
-    time of the slow pool decreases.
-    */
-    double rt_slow_pool;
-
-    /* total flux out of the factive pool */
-    f->factive = f->active_to_slow + f->active_to_passive + f->co2_to_air[4];
-
-    if (float_eq(f->factive, 0.0)) {
-        /* Need to correct units of rate constant */
-        rt_slow_pool = 1.0 / (p->kdec6 * NDAYS_IN_YR);
-    } else {
-        rt_slow_pool = (1.0 / p->prime_y  *
-                        (f->factive / (f->factive + p->prime_z)));
-
-        /* GDAY uses decay rates rather than residence times... */
-        p->kdec6 = 1.0 / rt_slow_pool;
-
-        /* rate constant needs to be per day inside GDAY */
-        p->kdec6 /= NDAYS_IN_YR;
-    }
-
-    /* Save for outputting purposes only */
-    f->rtslow = rt_slow_pool;
-
     return;
 }
 
diff --git a/src/water_balance.c b/src/water_balance.c
index 2cfb77b..7d19941 100644
--- a/src/water_balance.c
+++ b/src/water_balance.c
@@ -829,8 +829,6 @@ void initialise_soil_moisture_parameters(control *c, params *p) {
 
     exit(1); */
 
-
-
     free(fsoil_top);
     free(fsoil_root);
 
diff --git a/src/write_output_file.c b/src/write_output_file.c
index 47c573a..8e0244b 100644
--- a/src/write_output_file.c
+++ b/src/write_output_file.c
@@ -89,20 +89,9 @@ void write_output_header(control *c, FILE **fp) {
     fprintf(*fp, "co2_rel_from_slow_pool,");
     fprintf(*fp, "co2_rel_from_passive_pool,");
 
-    /* extra priming stuff */
-    fprintf(*fp, "root_exc,");
-    fprintf(*fp, "root_exn,");
-    fprintf(*fp, "co2_released_exud,");
-    fprintf(*fp, "factive,");
-    fprintf(*fp, "rtslow,");
-    fprintf(*fp, "rexc_cue,");
-
-
-
     /* Misc */
     fprintf(*fp, "leafretransn\n");
 
-
     if (c->output_ascii == FALSE) {
         fprintf(*fp, "nrows=%d\n", nrows);
         fprintf(*fp, "ncols=%d\n", ncols);
@@ -197,13 +186,7 @@ void write_daily_outputs_ascii(control *c, fluxes *f, state *s, int year,
     fprintf(c->ofp, "%.10f,", f->co2_rel_from_slow_pool);
     fprintf(c->ofp, "%.10f,", f->co2_rel_from_passive_pool);
 
-    /* extra priming stuff */
-    fprintf(c->ofp, "%.10f,", f->root_exc);
-    fprintf(c->ofp, "%.10f,", f->root_exn);
-    fprintf(c->ofp, "%.10f,", f->co2_released_exud);
-    fprintf(c->ofp, "%.10f,", f->factive);
-    fprintf(c->ofp, "%.10f,", f->rtslow);
-    fprintf(c->ofp, "%.10f,", f->rexc_cue);
+
 
     /* Misc */
     fprintf(c->ofp, "%.10f\n", f->leafretransn);
@@ -369,7 +352,7 @@ int write_final_state(control *c, params *p, state *s)
     int error = 0;
     int line_number = 0;
     int match = FALSE;
-    
+
     while (fgets(line, sizeof(line), c->ifp) != NULL) {
         strcpy(saved_line, line);
         line_number++;
